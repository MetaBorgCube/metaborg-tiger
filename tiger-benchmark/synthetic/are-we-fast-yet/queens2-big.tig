//https://github.com/smarr/are-we-fast-yet/blob/master/benchmarks/Java/src/Queens.java
for i := 0 to 30 do (
  let
    type intArray = array of int
    type intArray2 = array of int
    type intArray3 = array of int
    type intArray4 = array of int
    type intArray5 = array of int
  in
    let
      function queens(): int =
        let
          var freeRows  : intArray := intArray[ 8] of  1
          var freeMaxs  : intArray := intArray[16] of  1
          var freeMins  : intArray := intArray[16] of  1
          var queenRows : intArray := intArray[ 8] of -1
          
          function getRowColumn(r : int, c : int): int =
            (freeRows[r] + freeMaxs[c+r] + freeMins[c-r+7]) = 3
          
          function setRowColumn(r : int, c : int, v : int) = (
            freeRows[r        ] := v;
            freeMaxs[c + r    ] := v;
            freeMins[c - r + 7] := v
          )
          
          function placeQueen(c : int):int =
            let
              var placed : int := 0
            in
              for r := 0 to 7 do (
                if getRowColumn(r, c) = 1 then (
                  queenRows[r] := c;
                  setRowColumn(r, c, 0);
                  if c = 7 then (
                    placed := 1;
                    break
                  );
                  
                  if placeQueen(c + 1) = 1 then (
                    placed := 1;
                    break
                  );
                  setRowColumn(r, c, 1);
                  flush()
                )
              );
              placed
            end
            
            
          var freeRows2  : intArray := intArray[ 8] of  1
          var freeMaxs2  : intArray := intArray[16] of  1
          var freeMins2  : intArray := intArray[16] of  1
          var queenRows2 : intArray := intArray[ 8] of -1
          
          function getRowColumn2(r : int, c : int, r2 : int, c2 : int): int =
            (freeRows[r] + freeMaxs[c+r] + freeMins[c-r+7]) = 3
          
          function setRowColumn2(r : int, c : int, v : int, r2 : int, c2 : int, v2 : int) = (
            freeRows[r        ] := v;
            freeMaxs[c + r    ] := v;
            freeMins[c - r + 7] := v
          )
          
          function placeQueen2(c : int, c2 : int):int =
            let
              var placed : int := 0
            in
              for r := 0 to 7 do (
                if getRowColumn(r, c) = 1 then (
                  queenRows[r] := c;
                  setRowColumn(r, c, 0);
                  if c = 7 then (
                    placed := 1;
                    break
                  );
                  
                  if placeQueen(c + 1) = 1 then (
                    placed := 1;
                    break
                  );
                  setRowColumn(r, c, 1);
                  flush()
                )
              );
              placed
            end
            
            
          var freeRows3  : intArray := intArray[ 8] of  1
          var freeMaxs3  : intArray := intArray[16] of  1
          var freeMins3  : intArray := intArray[16] of  1
          var queenRows3 : intArray := intArray[ 8] of -1
          
          function getRowColumn3(r : int, c : int, r2 : int, c2 : int, r3 : int, c3 : int): int =
            (freeRows[r] + freeMaxs[c+r] + freeMins[c-r+7]) = 3
          
          function setRowColumn3(r : int, c : int, v : int, r2 : int, c2 : int, v2 : int, r3 : int, c3 : int, v3 : int) = (
            freeRows[r        ] := v;
            freeMaxs[c + r    ] := v;
            freeMins[c - r + 7] := v
          )
          
          function placeQueen3(c : int, c2 : int, c3 : int):int =
            let
              var placed : int := 0
            in
              for r := 0 to 7 do (
                if getRowColumn(r, c) = 1 then (
                  queenRows[r] := c;
                  setRowColumn(r, c, 0);
                  if c = 7 then (
                    placed := 1;
                    break
                  );
                  
                  if placeQueen(c + 1) = 1 then (
                    placed := 1;
                    break
                  );
                  setRowColumn(r, c, 1);
                  flush()
                )
              );
              placed
            end
            
            
          var freeRows4  : intArray := intArray[ 8] of  1
          var freeMaxs4  : intArray := intArray[16] of  1
          var freeMins4  : intArray := intArray[16] of  1
          var queenRows4 : intArray := intArray[ 8] of -1
          
          function getRowColumn4(r : int, c : int, r2 : int, c2 : int, r3 : int, c3 : int, r4 : int, c4 : int): int =
            (freeRows[r] + freeMaxs[c+r] + freeMins[c-r+7]) = 3
          
          function setRowColumn4(r : int, c : int, v : int, r2 : int, c2 : int, v2 : int, r3 : int, c3 : int, v3 : int, r4 : int, c4 : int, v4 : int) = (
            freeRows[r        ] := v;
            freeMaxs[c + r    ] := v;
            freeMins[c - r + 7] := v
          )
          
          function placeQueen4(c : int, c2 : int, c3 : int, c4 : int):int =
            let
              var placed : int := 0
            in
              for r := 0 to 7 do (
                if getRowColumn(r, c) = 1 then (
                  queenRows[r] := c;
                  setRowColumn(r, c, 0);
                  if c = 7 then (
                    placed := 1;
                    break
                  );
                  
                  if placeQueen(c + 1) = 1 then (
                    placed := 1;
                    break
                  );
                  setRowColumn(r, c, 1);
                  flush()
                )
              );
              placed
            end
            
            
          var freeRows5  : intArray := intArray[ 8] of  1
          var freeMaxs5  : intArray := intArray[16] of  1
          var freeMins5  : intArray := intArray[16] of  1
          var queenRows5 : intArray := intArray[ 8] of -1
          
          function getRowColumn5(r : int, c : int, r2 : int, c2 : int, r3 : int, c3 : int, r4 : int, c4 : int, r5 : int, c5 : int): int =
            (freeRows[r] + freeMaxs[c+r] + freeMins[c-r+7]) = 3
          
          function setRowColumn5(r : int, c : int, v : int, r2 : int, c2 : int, v2 : int, r3 : int, c3 : int, v3 : int, r4 : int, c4 : int, v4 : int, r5 : int, c5 : int, v5 : int) = (
            freeRows[r        ] := v;
            freeMaxs[c + r    ] := v;
            freeMins[c - r + 7] := v
          )
          
          function placeQueen5(c : int, c2 : int, c3 : int, c4 : int, c5 : int):int =
            let
              var placed : int := 0
            in
              for r := 0 to 7 do (
                if getRowColumn(r, c) = 1 then (
                  queenRows[r] := c;
                  setRowColumn(r, c, 0);
                  if c = 7 then (
                    placed := 1;
                    break
                  );
                  
                  if placeQueen(c + 1) = 1 then (
                    placed := 1;
                    break
                  );
                  setRowColumn(r, c, 1);
                  flush()
                )
              );
              placed
            end
              
        in
          placeQueen(0)
        end
     in
      queens(); ()
     end
  end
)