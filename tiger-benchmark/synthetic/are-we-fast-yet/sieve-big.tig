//https://github.com/smarr/are-we-fast-yet/blob/master/benchmarks/Java/src/Sieve.java
for i := 0 to 30 do (
  let
    type intArray = array of int
    type intArray2 = array of int
    type intArray3 = array of int
    type intArray4 = array of int
    type intArray5 = array of int
  in
    let
      function sieve(flags : intArray, size : int): int = (
        let
          var primeCount : int := 0
          var primeCount2 : int := 0
          var primeCount3 : int := 0
          var primeCount4 : int := 0
          var primeCount5 : int := 0
        in
          for i := 2 to size do (
            if flags[i-1] = 1 then (
              primeCount := primeCount + 1;
              let
                var k : int := i + i
                var k2 : int := i + i
                var k3 : int := i + i
                var k4 : int := i + i
                var k5 : int := i + i
              in
                while k <= size do (
                  flags[k-1] := 0;
                  k := k + i
                )
              end
            )
          );
          primeCount
        end
      )
      
      function sieve2(flags : intArray, size : int, flags2 : intArray, size2 : int): int = (
        let
          var primeCount : int := 0
          var primeCount2 : int := 0
          var primeCount3 : int := 0
          var primeCount4 : int := 0
          var primeCount5 : int := 0
        in
          for i := 2 to size do (
            if flags[i-1] = 1 then (
              primeCount := primeCount + 1;
              let
                var k : int := i + i
                var k2 : int := i + i
                var k3 : int := i + i
                var k4 : int := i + i
                var k5 : int := i + i
              in
                while k <= size do (
                  flags[k-1] := 0;
                  k := k + i
                )
              end
            )
          );
          primeCount
        end
      )
      
      function sieve3(flags : intArray, size : int, flags2 : intArray, size2 : int, flags3 : intArray, size3 : int): int = (
        let
          var primeCount : int := 0
          var primeCount2 : int := 0
          var primeCount3 : int := 0
          var primeCount4 : int := 0
          var primeCount5 : int := 0
        in
          for i := 2 to size do (
            if flags[i-1] = 1 then (
              primeCount := primeCount + 1;
              let
                var k : int := i + i
                var k2 : int := i + i
                var k3 : int := i + i
                var k4 : int := i + i
                var k5 : int := i + i
              in
                while k <= size do (
                  flags[k-1] := 0;
                  k := k + i
                )
              end
            )
          );
          primeCount
        end
      )
      
      function sieve4(flags : intArray, size : int, flags2 : intArray, size2 : int, flags3 : intArray, size3 : int, flags4 : intArray, size4 : int): int = (
        let
          var primeCount : int := 0
          var primeCount2 : int := 0
          var primeCount3 : int := 0
          var primeCount4 : int := 0
          var primeCount5 : int := 0
        in
          for i := 2 to size do (
            if flags[i-1] = 1 then (
              primeCount := primeCount + 1;
              let
                var k : int := i + i
                var k2 : int := i + i
                var k3 : int := i + i
                var k4 : int := i + i
                var k5 : int := i + i
              in
                while k <= size do (
                  flags[k-1] := 0;
                  k := k + i
                )
              end
            )
          );
          primeCount
        end
      )
      
      function sieve5(flags : intArray, size : int, flags2 : intArray, size2 : int, flags3 : intArray, size3 : int, flags4 : intArray, size4 : int, flags5 : intArray, size5 : int): int = (
        let
          var primeCount : int := 0
          var primeCount2 : int := 0
          var primeCount3 : int := 0
          var primeCount4 : int := 0
          var primeCount5 : int := 0
        in
          for i := 2 to size do (
            if flags[i-1] = 1 then (
              primeCount := primeCount + 1;
              let
                var k : int := i + i
                var k2 : int := i + i
                var k3 : int := i + i
                var k4 : int := i + i
                var k5 : int := i + i
              in
                while k <= size do (
                  flags[k-1] := 0;
                  k := k + i
                )
              end
            )
          );
          primeCount
        end
      )
    in
      let
        var flags := intArray[5000] of 1
        var flags2 := intArray[5000] of 1
        var flags3 := intArray[5000] of 1
        var flags4 := intArray[5000] of 1
        var flags5 := intArray[5000] of 1
      in
        sieve(flags, 5000); () // 669
      end
    end
  end
)
