module injections/Records-injections

imports
  signatures/Records-sig
  pp/Records-pp
  libspoofax/term/origin


imports
  injections/Base-injections


signature
  constructors
    Field-Plhdr     : Field
    InitField-Plhdr : InitField


rules

  is-Tiger-Type-or-inj =
    ?RecordTy(_)

  is-Tiger-Field-or-inj =
    ?Field(_, _)

  is-Tiger-Exp-or-inj =
    ?NilExp()

  is-Tiger-Exp-or-inj =
    ?Record(_, _)

  is-Tiger-InitField-or-inj =
    ?InitField(_, _)

  is-Tiger-LValue-or-inj =
    ?FieldVar(_, _)


rules

  is-Tiger-inj-cons =
    is-Tiger-Field-inj-cons

  is-Tiger-Field-inj-cons =
    fail

  is-Tiger-inj-cons =
    is-Tiger-InitField-inj-cons

  is-Tiger-InitField-inj-cons =
    fail


rules

  explicate-injections-Tiger =
    explicate-injections-Tiger-Field

  explicate-injections-Tiger =
    explicate-injections-Tiger-InitField

  explicate-injections-Tiger-Type =
    origin-track-forced(
      \ RecordTy(fields){anno*} -> RecordTy(fields'){anno*}
        with fields' := <map(explicate-injections-Tiger-Field)> fields \
    )

  explicate-injections-Tiger-Field =
    origin-track-forced(
      \ Field(id_1, id_2){anno*} -> Field(id_1', id_2'){anno*}
        with id_1' := <explicate-injections-Tiger-ID> id_1
             ; id_2' := <explicate-injections-Tiger-ID> id_2 \
    )

  explicate-injections-Tiger-Exp =
    origin-track-forced(
      \ NilExp(){anno*} -> NilExp(){anno*} \
    )

  explicate-injections-Tiger-Exp =
    origin-track-forced(
      \ Record(id_, initFields){anno*} -> Record(id_', initFields'){anno*}
        with id_' := <explicate-injections-Tiger-ID> id_
             ; initFields' := <map(explicate-injections-Tiger-InitField)> initFields \
    )

  explicate-injections-Tiger-InitField =
    origin-track-forced(
      \ InitField(id_, exp){anno*} -> InitField(id_', exp'){anno*}
        with id_' := <explicate-injections-Tiger-ID> id_
             ; exp' := <explicate-injections-Tiger-Exp> exp \
    )

  explicate-injections-Tiger-LValue =
    origin-track-forced(
      \ FieldVar(lValue, id_){anno*} -> FieldVar(lValue', id_'){anno*}
        with lValue' := <explicate-injections-Tiger-LValue> lValue
             ; id_' := <explicate-injections-Tiger-ID> id_ \
    )

  explicate-injections-Tiger-Field =
    origin-track-forced(
      \ Field-Plhdr(){anno*} -> Field-Plhdr(){anno*} \
    )

  explicate-injections-Tiger-InitField =
    origin-track-forced(
      \ InitField-Plhdr(){anno*} -> InitField-Plhdr(){anno*} \
    )

  explicate-injections-Tiger-Field =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <map(explicate-injections-Tiger-Field)> alts \
    )

  explicate-injections-Tiger-InitField =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <map(explicate-injections-Tiger-InitField)> alts \
    )


rules

  implicate-injections-Tiger =
    implicate-injections-Tiger-Field

  implicate-injections-Tiger =
    implicate-injections-Tiger-InitField

  implicate-injections-Tiger-Type =
    origin-track-forced(
      \ RecordTy(fields){anno*} -> RecordTy(fields'){anno*}
        with fields' := <map(implicate-injections-Tiger-Field)> fields \
    )

  implicate-injections-Tiger-Field =
    origin-track-forced(
      \ Field(id_1, id_2){anno*} -> Field(id_1', id_2'){anno*}
        with id_1' := <implicate-injections-Tiger-ID> id_1
             ; id_2' := <implicate-injections-Tiger-ID> id_2 \
    )

  implicate-injections-Tiger-Exp =
    origin-track-forced(
      \ NilExp(){anno*} -> NilExp(){anno*} \
    )

  implicate-injections-Tiger-Exp =
    origin-track-forced(
      \ Record(id_, initFields){anno*} -> Record(id_', initFields'){anno*}
        with id_' := <implicate-injections-Tiger-ID> id_
             ; initFields' := <map(implicate-injections-Tiger-InitField)> initFields \
    )

  implicate-injections-Tiger-InitField =
    origin-track-forced(
      \ InitField(id_, exp){anno*} -> InitField(id_', exp'){anno*}
        with id_' := <implicate-injections-Tiger-ID> id_
             ; exp' := <implicate-injections-Tiger-Exp> exp \
    )

  implicate-injections-Tiger-LValue =
    origin-track-forced(
      \ FieldVar(lValue, id_){anno*} -> FieldVar(lValue', id_'){anno*}
        with lValue' := <implicate-injections-Tiger-LValue> lValue
             ; id_' := <implicate-injections-Tiger-ID> id_ \
    )

  implicate-injections-Tiger-Field =
    origin-track-forced(
      \ Field-Plhdr(){anno*} -> Field-Plhdr(){anno*} \
    )

  implicate-injections-Tiger-InitField =
    origin-track-forced(
      \ InitField-Plhdr(){anno*} -> InitField-Plhdr(){anno*} \
    )

  implicate-injections-Tiger-Field =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <map(implicate-injections-Tiger-Field)> alts \
    )

  implicate-injections-Tiger-InitField =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <map(implicate-injections-Tiger-InitField)> alts \
    )


rules

  upgrade-placeholders-Tiger =
    upgrade-placeholders-Tiger-Field

  upgrade-placeholders-Tiger =
    upgrade-placeholders-Tiger-InitField

  upgrade-placeholders-Tiger-Type =
    origin-track-forced(
      \ RecordTy(fields){anno*} -> RecordTy(fields'){anno*}
        with fields' := <upgrade-list(upgrade-placeholders-Tiger-Field)> fields \
    )

  upgrade-placeholders-Tiger-Field =
    origin-track-forced(
      \ Field(id_1, id_2){anno*} -> Field(id_1', id_2'){anno*}
        with id_1' := <upgrade-placeholders-Tiger-ID> id_1
             ; id_2' := <upgrade-placeholders-Tiger-ID> id_2 \
    )

  upgrade-placeholders-Tiger-Exp =
    origin-track-forced(
      \ NilExp(){anno*} -> NilExp(){anno*} \
    )

  upgrade-placeholders-Tiger-Exp =
    origin-track-forced(
      \ Record(id_, initFields){anno*} -> Record(id_', initFields'){anno*}
        with id_' := <upgrade-placeholders-Tiger-ID> id_
             ; initFields' := <upgrade-list(upgrade-placeholders-Tiger-InitField)> initFields \
    )

  upgrade-placeholders-Tiger-InitField =
    origin-track-forced(
      \ InitField(id_, exp){anno*} -> InitField(id_', exp'){anno*}
        with id_' := <upgrade-placeholders-Tiger-ID> id_
             ; exp' := <upgrade-placeholders-Tiger-Exp> exp \
    )

  upgrade-placeholders-Tiger-LValue =
    origin-track-forced(
      \ FieldVar(lValue, id_){anno*} -> FieldVar(lValue', id_'){anno*}
        with lValue' := <upgrade-placeholders-Tiger-LValue> lValue
             ; id_' := <upgrade-placeholders-Tiger-ID> id_ \
    )

  upgrade-placeholders-Tiger-Field =
    origin-track-forced(
      \ Field-Plhdr(){anno*} -> p{anno*}
        with p := <make-placeholder> "Field" \
    )

  upgrade-placeholders-Tiger-InitField =
    origin-track-forced(
      \ InitField-Plhdr(){anno*} -> p{anno*}
        with p := <make-placeholder> "InitField" \
    )

  upgrade-placeholders-Tiger-Field =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <upgrade-list(upgrade-placeholders-Tiger-Field)> alts \
    )

  upgrade-placeholders-Tiger-InitField =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <upgrade-list(upgrade-placeholders-Tiger-InitField)> alts \
    )


rules

  downgrade-placeholders-Tiger =
    downgrade-placeholders-Tiger-Field

  downgrade-placeholders-Tiger =
    downgrade-placeholders-Tiger-InitField

  downgrade-placeholders-Tiger-Type =
    origin-track-forced(
      \ RecordTy(fields){anno*} -> RecordTy(fields'){anno*}
        with fields' := <downgrade-list(downgrade-placeholders-Tiger-Field)> fields \
    )

  downgrade-placeholders-Tiger-Field =
    origin-track-forced(
      \ Field(id_1, id_2){anno*} -> Field(id_1', id_2'){anno*}
        with id_1' := <downgrade-placeholders-Tiger-ID> id_1
             ; id_2' := <downgrade-placeholders-Tiger-ID> id_2 \
    )

  downgrade-placeholders-Tiger-Exp =
    origin-track-forced(
      \ NilExp(){anno*} -> NilExp(){anno*} \
    )

  downgrade-placeholders-Tiger-Exp =
    origin-track-forced(
      \ Record(id_, initFields){anno*} -> Record(id_', initFields'){anno*}
        with id_' := <downgrade-placeholders-Tiger-ID> id_
             ; initFields' := <downgrade-list(downgrade-placeholders-Tiger-InitField)> initFields \
    )

  downgrade-placeholders-Tiger-InitField =
    origin-track-forced(
      \ InitField(id_, exp){anno*} -> InitField(id_', exp'){anno*}
        with id_' := <downgrade-placeholders-Tiger-ID> id_
             ; exp' := <downgrade-placeholders-Tiger-Exp> exp \
    )

  downgrade-placeholders-Tiger-LValue =
    origin-track-forced(
      \ FieldVar(lValue, id_){anno*} -> FieldVar(lValue', id_'){anno*}
        with lValue' := <downgrade-placeholders-Tiger-LValue> lValue
             ; id_' := <downgrade-placeholders-Tiger-ID> id_ \
    )

  downgrade-placeholders-Tiger-Field =
    origin-track-forced(
      \ p{anno*} -> Field-Plhdr(){anno*}
        where <(is-placeholder + ?Field-Plhdr())> p \
    )

  downgrade-placeholders-Tiger-InitField =
    origin-track-forced(
      \ p{anno*} -> InitField-Plhdr(){anno*}
        where <(is-placeholder + ?InitField-Plhdr())> p \
    )

  downgrade-placeholders-Tiger-Field =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <downgrade-list(downgrade-placeholders-Tiger-Field)> alts \
    )

  downgrade-placeholders-Tiger-InitField =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <downgrade-list(downgrade-placeholders-Tiger-InitField)> alts \
    )


rules

  explicate-option(s) =
    origin-track-forced(
      \ None(){anno*} -> []{anno*} \
    )

  explicate-option(s) =
    origin-track-forced(
      \ Some(t){anno*} -> [<s> t]{anno*} \
    )

  implicate-option(s) =
    origin-track-forced(
      \ []{anno*} -> None(){anno*} \
    )

  implicate-option(s) =
    origin-track-forced(
      \ [t]{anno*} -> Some(<s> t){anno*} \
    )

  implicate-option(s) =
    origin-track-forced(
      \ [_, _|_] -> <fatal-err(|"Cannot implicate multi-element list to option.")> \
    )


rules

  upgrade-option(s) =
    origin-track-forced(
      \ None(){anno*} -> []{anno*} \
    )

  upgrade-option(s) =
    origin-track-forced(
      \ Some(t){anno*} -> [<s> t]{anno*} \
    )

  upgrade-list(s) =
    origin-track-forced(
      \ l -> l'
        where <is-list> l
        with l' := <map(s)> l \
    )

  upgrade-list(s) =
    origin-track-forced(
      \ l -> l'
        where <fail> l
        with l' := <make-placeholder> "list" \
    )

  downgrade-option(s) =
    origin-track-forced(
      \ None(){anno*} -> None(){anno*} \
    )

  downgrade-option(s) =
    origin-track-forced(
      \ Some(t){anno*} -> Some(<s> t){anno*} \
    )

  downgrade-list(s) =
    origin-track-forced(
      \ p -> p'
        where <is-placeholder> p
        with p' := [] \
    )

  downgrade-list(s) =
    origin-track-forced(
      \ []{anno*} -> []{anno*} \
    )

  downgrade-list(s) =
    origin-track-forced(
      \ [e|es]{anno*} -> [e'|es']{anno*}
        with e' := <s> e
             ; es' := <downgrade-list(s)> es \
    )