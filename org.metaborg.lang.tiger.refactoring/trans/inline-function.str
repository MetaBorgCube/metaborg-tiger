module inline-function

imports 
	signatures/-
	nabl2/api
	pp
	libspoofax/stratego/debug
	renaming

rules // menu action strategies
  inline-function-action :
    (selected-id, _, ast, path, project-path) -> (filename, result)
    where
    	analysis := <nabl2-get-ast-analysis> ast;
      <not(nabl2-analysis-has-errors)> analysis
    with
      filename := <guarantee-extension(|"refactored.tig")> path
      ; target-dec-occ := <collect-one(get-function-declaration(|analysis, selected-id)) > ast
      ; (params, body) := <collect-one(get-function(|target-dec-occ))> ast
      ; result := <topdown(try(replace-call(|selected-id, body, params))); pp-Tiger-string> ast
      
      
rules //get-function-declaration
	get-function-declaration(|analysis, selected-id): Call(name, args) -> dec-occ
	where
	  dec-occ := <get-dec-from-ref(|analysis, "Var", name, name)> selected-id
	  
rules //get-function
  get-function(|target-dec-occ): FunDec(name, params, type, body) -> (params, body)
	where
		check-dec-occ(|"Var", name, target-dec-occ)
		
  get-function(|target-dec-occ): ProcDec(name, params, body) -> (params, body)
	where
		check-dec-occ(|"Var", name, target-dec-occ)
		
rules //replace-call
  replace-call(|select-id, body, params): Call(name, args) -> Let(vars, [body])
  where
  	<?select-id> name
  	; vars := <zip(create-var-dec)> (params, args)
  	; <ppdebugna0> vars
		
rules //extract-param-name
  extract-param-name : FArg(name, tid) -> name
  
rules //create-var-dec
	create-var-dec : (FArg(name, tid), exp) -> VarDec(name, tid, exp)

		